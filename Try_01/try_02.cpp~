#include "soapwsHttpWellthServiceProxy.h"
#include "wsHttpWellthService.nsmap"

int main()
{
wsHttpWellthServiceProxy service;
//char request[64];
std::string request = "dileeptp@gmail.com";
char response[64];
_ns3__GetNameByEmailID soapRequest;
_ns3__GetNameByEmailIDResponse soapResponse;
struct soap *pSoap = NULL;

pSoap = soap_new();

soap_set_namespaces(pSoap,namespaces);

/*Added by shan*/
struct soap soap;
soap_init(&soap);
soap.userid = "guest";
soap.passwd = "visit";
soap.recv_timeout = 60;


/***
soap_ssl_init();
if (soap_ssl_client_context(pSoap, SOAP_SSL_NO_AUTHENTICATION, NULL,NULL,NULL,NULL,NULL) == SOAP_OK)
  std::cout << "Client COntext set OK " << std::endl;
***/
//soap_ssl_init(); /* init OpenSSL (just once) shanmugam*/

/* Added By Shan*/

int m, s;
pthread_t tid;
soap_ssl_init(); /* init OpenSSL (just once) */
struct soap soap, *tsoap;

if (CRYPTO_thread_setup()) // OpenSSL
{
fprintf(stderr, ”Cannot setup thread mutex\n”);
exit(1);
}
soap_init(&soap);

if (soap_ssl_client_context(pSoap,
   /*SOAP_SSL_DEFAULT*/SOAP_SSL_NO_AUTHENTICATION,
   "server.pem", /* keyfile: required only when client must authenticate to server (see SSL docs on how to obtain this file) */
   "Wellth!", /* password to read the key file (not used with GNUTLS) */
   "cacert.pem", /* cacert file to store trusted certificates (needed to verify server) */    "/home/wellth1/wellth/Try_01", /* capath to directory with trusted certificates */
   NULL, /* if randfile!=NULL: use a file with random data to seed randomness */ 
   NULL
) == SOAP_OK)
{
   soap_print_fault(soap, stderr);
   exit(1);
} 


m = soap_bind(&soap, NULL, 18000, 100); // use port 18000
if (m < 0)
{
soap_print_fault(&soap, stderr);
exit(1);
}
fprintf(stderr, ”Socket connection successful: master socket = %d\n”, m);
for (;;)
{
s = soap_accept(&soap);
fprintf(stderr, ”Socket connection successful: slave socket = %d\n”, s);
if (s < 0)
{
soap_print_fault(&soap, stderr);
break;
}
tsoap = soap_copy(&soap); /* should call soap ssl accept on a copy */
if (!tsoap)
break;

pthread_create(&tid, NULL, &process_request, (void*)tsoap);
}
soap_done(&soap); /* deallocates SSL context */
CRYPTO_thread_cleanup(); // OpenSSL
return 0;
}
void *process_request(void *soap)
{
pthread_detach(pthread_self());
if (soap_ssl_accept((struct soap*)soap))
soap_print_fault(tsoap, stderr);
else
soap_serve((struct soap*)soap);
soap_destroy((struct soap*)soap);
soap_end((struct soap*)soap);
soap_free((struct soap*)soap); // done and free context
return NULL;
}
/*-----------End--------------*/


#if 0

if (soap_ssl_client_context(pSoap,
   /*SOAP_SSL_DEFAULT*/SOAP_SSL_NO_AUTHENTICATION,
   "client.pem", /* keyfile: required only when client must authenticate to server (see SSL docs on how to obtain this file) */
   "Wellth!", /* password to read the key file (not used with GNUTLS) */
   "cacert.pem", /* cacert file to store trusted certificates (needed to verify server) */    "/home/wellth1/wellth/Try_01", /* capath to directory with trusted certificates */
   NULL /* if randfile!=NULL: use a file with random data to seed randomness */ 
) == SOAP_OK)
{
   soap_print_fault(pSoap, stderr);
   exit(1);
} 
#endif
/**
strcpy(request,"dileeptp@gmail.com");
soapRequest.emailID = (std::string *)&request;
**/
#if 0
pSoap->ssl_flags = SOAP_SSL_NO_AUTHENTICATION | SOAP_SSL_NO_DEFAULT_CA_PATH;
soapRequest.emailID = &request;
soapRequest.soap = pSoap;
#endif


// if (service.GetNameByEmailID((_ns3__GetNameByEmailID*)request,(_ns3__GetNameByEmailIDResponse*)response) == SOAP_OK)
//soap_call___ns1__GetNameByEmailID(pSoap,NULL,NULL,&soapRequest,&soapResponse);
#if 0
if (service.GetNameByEmailID(&soapRequest,&soapResponse) == SOAP_OK)
  std::cout << "The response is " << response << std::endl;
else
  service.soap_stream_fault(std::cerr); 
  service.destroy(); // delete data and release memory 
#endif

}
